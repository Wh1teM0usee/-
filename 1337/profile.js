document.addEventListener('DOMContentLoaded', async function() {    // Проверяем статус авторизации    await checkAuthStatus();        // Если пользователь не авторизован - перенаправляем    if (localStorage.getItem('isLoggedIn') !== 'true') {        window.location.href = '/1337/login.html';        return;    }        // Инициализация обработчиков    initProfileHandlers();        // Загружаем данные профиля    await loadProfileData();        // Загружаем список номеров    await loadRooms();        // Настраиваем кнопку выхода    setupLogout();        // Если пользователь админ - загружаем список пользователей    if (localStorage.getItem('role') === 'admin') {        await loadUsers();    }});// Функция загрузки данных профиляasync function loadProfileData() {    try {        const userId = localStorage.getItem('userId');        if (!userId) {            throw new Error('Не удалось определить пользователя');        }                console.log('Загрузка данных профиля для пользователя ID:', userId);                // Получаем данные пользователя        const userResponse = await fetch(`/1337/users_api.php?action=get_user&id=${userId}`, {            method: 'GET',            credentials: 'include'        });                if (!userResponse.ok) {            throw new Error(`HTTP error! status: ${userResponse.status}`);        }                const userData = await userResponse.json();        console.log('Данные пользователя:', userData);                if (!userData.success) {            throw new Error(userData.message || 'Пользователь не найден');        }                if (!userData.data || !userData.data.user) {            throw new Error('Данные пользователя не получены');        }                // Получаем бронирования пользователя        const bookingsResponse = await fetch(`/1337/api.php?action=admin_get_bookings&user_id=${userId}`, {            method: 'GET',            credentials: 'include'        });                let bookings = [];        if (bookingsResponse.ok) {            const bookingsData = await bookingsResponse.json();            if (bookingsData.success && bookingsData.data) {                bookings = bookingsData.data.filter(booking => booking.user_id == userId);            }        }                console.log('Бронирования пользователя:', bookings);                // Отображаем данные пользователя        renderProfile({            ...userData.data.user,            bookings: bookings        });                // Скрываем индикаторы загрузки        const profileLoading = document.querySelector('#profile-container .loading');        const bookingsLoading = document.querySelector('#bookings-container .loading');                if (profileLoading) profileLoading.style.display = 'none';        if (bookingsLoading) bookingsLoading.style.display = 'none';            } catch (error) {        console.error('Ошибка загрузки профиля:', error);        showProfileError(error.message);    }}// Функция отображения данных профиляfunction renderProfile(user) {    const profileContainer = document.getElementById('profile-container');    const bookingsContainer = document.getElementById('bookings-container');        if (!profileContainer || !bookingsContainer) {        console.error('Контейнеры профиля не найдены');        return;    }        // Создаем HTML для профиля    profileContainer.innerHTML = `        <div class="profile-header">            <h2>Профиль пользователя</h2>            <div class="profile-avatar-container">                <img src="${user.avatar_path || '/1337/images/default-avatar.png'}"                      alt="Аватар" id="profile-avatar" class="profile-avatar">                <button id="avatar-upload-btn" class="avatar-upload-btn">                    <i class="fas fa-camera"></i>                </button>            </div>        </div>        <div class="profile-content">            <div class="profile-field">                <label>Имя:</label>                <span id="first-name">${user.first_name || 'Не указано'}</span>            </div>            <div class="profile-field">                <label>Фамилия:</label>                <span id="last-name">${user.last_name || 'Не указано'}</span>            </div>            <div class="profile-field">                <label>Email:</label>                <span id="email">${user.email || 'Не указан'}</span>            </div>            <div class="profile-field">                <label>Телефон:</label>                <span id="phone">${user.phone || 'Не указан'}</span>            </div>            <div class="profile-field">                <label>Дата рождения:</label>                <span id="birth-date">${user.birth_date || 'Не указана'}</span>            </div>        </div>        <div class="profile-actions">            <button id="edit-profile-btn" class="profile-btn">                <i class="fas fa-edit"></i> Редактировать            </button>        </div>    `;        // Отображаем бронирования    if (user.bookings && user.bookings.length > 0) {        bookingsContainer.innerHTML = `            <h3>Мои бронирования</h3>            <div class="bookings-list">                ${user.bookings.map(booking => `                    <div class="booking-card">                        <div class="booking-header">                            <span class="booking-title">${booking.room_title || 'Номер'}</span>                            <span class="booking-status ${booking.status}">                                ${booking.status === 'confirmed' ? 'Подтверждено' : 'Отменено'}                            </span>                        </div>                        <div class="booking-details">                            <div class="booking-field">                                <label>Даты:</label>                                <span>${formatDate(booking.check_in)} - ${formatDate(booking.check_out)}</span>                            </div>                            <div class="booking-field">                                <label>Гости:</label>                                <span>${booking.guests} чел.</span>                            </div>                            <div class="booking-field">                                <label>Стоимость:</label>                                <span>${booking.total_price} руб.</span>                            </div>                        </div>                    </div>                `).join('')}            </div>        `;    } else {        bookingsContainer.innerHTML = `            <h3>Мои бронирования</h3>            <p class="no-bookings">У вас нет активных бронирований</p>        `;    }        // Инициализация обработчиков    initProfileHandlers();}// Функция форматирования датыfunction formatDate(dateString) {    if (!dateString) return 'Не указана';    const date = new Date(dateString);    return date.toLocaleDateString('ru-RU');}// Функция инициализации обработчиков событийfunction initProfileHandlers() {    // Кнопка редактирования профиля    const editBtn = document.getElementById('edit-profile-btn');    if (editBtn) {        editBtn.addEventListener('click', toggleEditMode);    }        // Кнопка загрузки аватара    const avatarUploadBtn = document.getElementById('avatar-upload-btn');    if (avatarUploadBtn) {        const avatarInput = document.createElement('input');        avatarInput.type = 'file';        avatarInput.accept = 'image/*';        avatarInput.style.display = 'none';                avatarUploadBtn.appendChild(avatarInput);                avatarUploadBtn.addEventListener('click', () => {            avatarInput.click();        });                avatarInput.addEventListener('change', handleAvatarUpload);    }}// Функция переключения режима редактированияfunction toggleEditMode() {    const editBtn = document.getElementById('edit-profile-btn');        if (!editBtn) return;        if (editBtn.textContent.includes('Редактировать')) {        editBtn.innerHTML = '<i class="fas fa-times"></i> Отменить';                // Заменяем поля на инпуты        replaceFieldWithInput('first-name', 'text', 'Иван');        replaceFieldWithInput('last-name', 'text', 'Иванов');        replaceFieldWithInput('email', 'email', 'email@example.com');        replaceFieldWithInput('phone', 'tel', '+79991234567');        replaceFieldWithInput('birth-date', 'date', '2000-01-01');                // Добавляем кнопку сохранения        const profileActions = document.querySelector('.profile-actions');        if (profileActions) {            const saveBtn = document.createElement('button');            saveBtn.className = 'profile-btn save';            saveBtn.innerHTML = '<i class="fas fa-save"></i> Сохранить';            saveBtn.id = 'save-profile-btn';            saveBtn.addEventListener('click', saveProfile);            profileActions.appendChild(saveBtn);        }    } else {        location.reload(); // Отмена редактирования    }}// Функция замены текстового поля на инпутfunction replaceFieldWithInput(fieldId, type, placeholder) {    const field = document.getElementById(fieldId);    if (!field) return;        const value = field.textContent === 'Не указано' ||                  field.textContent === 'Не указан' ||                  field.textContent === 'Не указана'                  ? ''                  : field.textContent;        field.innerHTML = `<input type="${type}" id="edit-${fieldId}" value="${value}" placeholder="${placeholder}">`;}// Функция обработки загрузки аватараasync function handleAvatarUpload(event) {    const file = event.target.files[0];    if (!file) return;        try {        const formData = new FormData();        formData.append('avatar', file);        formData.append('action', 'update_avatar');        formData.append('id', localStorage.getItem('userId'));                const response = await fetch('/1337/users_api.php', {            method: 'POST',            body: formData,            credentials: 'include'        });                const data = await response.json();                if (!data.success) {            throw new Error(data.message);        }                // Обновляем аватар        const avatarImg = document.getElementById('profile-avatar');        if (avatarImg) {            avatarImg.src = URL.createObjectURL(file);        }                // Показываем уведомление        showProfileMessage('Аватар успешно обновлен');    } catch (error) {        console.error('Ошибка загрузки аватара:', error);        showProfileError(error.message);    }}// Функция сохранения профиляasync function saveProfile() {    const saveBtn = document.getElementById('save-profile-btn');    if (saveBtn) saveBtn.disabled = true;        try {        const userId = localStorage.getItem('userId');        if (!userId) throw new Error('Требуется авторизация');                const formData = {            action: 'update_user',            id: userId,            first_name: document.getElementById('edit-first-name')?.value || '',            last_name: document.getElementById('edit-last-name')?.value || '',            email: document.getElementById('edit-email')?.value || '',            phone: document.getElementById('edit-phone')?.value || null,            birth_date: document.getElementById('edit-birth-date')?.value || null        };        const response = await fetch('/1337/users_api.php', {            method: 'POST',            headers: {                'Content-Type': 'application/x-www-form-urlencoded',            },            body: new URLSearchParams(formData).toString(),            credentials: 'include'        });        const result = await response.json();                if (!response.ok || !result.success) {            throw new Error(result.message || `HTTP ${response.status}`);        }        showProfileMessage('Данные успешно сохранены!');        setTimeout(() => location.reload(), 1500);            } catch (error) {        console.error('Ошибка сохранения:', error);        showProfileError(error.message || 'Ошибка при сохранении');    } finally {        if (saveBtn) saveBtn.disabled = false;    }}// Функция загрузки номеровasync function loadRooms() {    try {        const response = await fetch('/1337/api.php?action=get_rooms', {            method: 'GET',            credentials: 'include'        });                if (!response.ok) {            throw new Error(`HTTP error! status: ${response.status}`);        }                const data = await response.json();                if (!data.success) {            throw new Error(data.message || 'Не удалось загрузить номера');        }                renderRooms(data.data || data);            } catch (error) {        console.error('Ошибка загрузки номеров:', error);        showProfileError('Не удалось загрузить список номеров: ' + error.message);    }}// Функция отображения номеровfunction renderRooms(rooms) {    const roomsContainer = document.createElement('div');    roomsContainer.id = 'rooms-container';    roomsContainer.innerHTML = `        <h3>Доступные номера</h3>        <div class="rooms-grid" id="rooms-grid"></div>    `;        const oldContainer = document.getElementById('rooms-container');    if (oldContainer) {        oldContainer.remove();    }        const profileSection = document.querySelector('.profile-section .container');    if (profileSection) {        profileSection.appendChild(roomsContainer);    }        const grid = document.getElementById('rooms-grid');    if (!grid) return;        if (!rooms || rooms.length === 0) {        grid.innerHTML = '<p class="no-rooms">Нет доступных номеров</p>';        return;    }        const availableRooms = rooms.filter(room => room.is_available == 1);        if (availableRooms.length === 0) {        grid.innerHTML = '<p class="no-rooms">В настоящее время нет доступных номеров</p>';        return;    }        availableRooms.forEach(room => {        const roomCard = document.createElement('div');        roomCard.className = 'room-card';        roomCard.innerHTML = `            <div class="room-image">                <img src="${room.image_path || 'https://via.placeholder.com/300x200?text=No+Image'}"                      alt="${room.title}" loading="lazy">                <div class="room-status ${room.is_available ? 'available' : 'unavailable'}">                    ${room.is_available ? 'Доступен' : 'Занят'}                </div>            </div>            <div class="room-info">                <h4>${room.title}</h4>                <p class="room-description">${truncateDescription(room.description || 'Описание отсутствует', 100)}</p>                <div class="room-details">                    <div class="detail-item">                        <i class="fas fa-ruble-sign"></i>                        <span>${parseFloat(room.price_per_night).toLocaleString('ru-RU')} руб./ночь</span>                    </div>                    <div class="detail-item">                        <i class="fas fa-users"></i>                        <span>До ${room.capacity} чел.</span>                    </div>                </div>                <button class="book-btn" data-room-id="${room.id}">                    <i class="fas fa-calendar-check"></i> Забронировать                </button>            </div>        `;        grid.appendChild(roomCard);    });        document.querySelectorAll('.book-btn').forEach(btn => {        btn.addEventListener('click', function() {            const roomId = this.getAttribute('data-room-id');            window.location.href = `/1337/booking.html?room_id=${roomId}`;        });    });}// Функция для сокращения длинного описанияfunction truncateDescription(text, maxLength) {    if (!text) return '';    if (text.length <= maxLength) return text;    return text.substring(0, maxLength) + '...';}// Функция проверки статуса авторизацииasync function checkAuthStatus() {    try {        const response = await fetch('/1337/api.php?action=check_auth', {            method: 'GET',            credentials: 'include',            headers: { 'Accept': 'application/json' }        });        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);        const result = await response.json();                if (result.success && result.data?.authenticated && result.data.user) {            localStorage.setItem('isLoggedIn', 'true');            localStorage.setItem('username', result.data.user.username || 'Гость');            localStorage.setItem('userId', result.data.user.id || '');            localStorage.setItem('role', result.data.user.role || 'user');        } else {            localStorage.removeItem('isLoggedIn');            localStorage.removeItem('username');            localStorage.removeItem('userId');            localStorage.removeItem('role');        }                updateAuthUI();    } catch (error) {        console.error('Error checking auth status:', error);        localStorage.removeItem('isLoggedIn');        updateAuthUI();    }}// Функция обновления UI авторизацииfunction updateAuthUI() {    const authMessage = document.getElementById('auth-message');    const logoutBtn = document.getElementById('logout-btn');    const loginBtn = document.getElementById('login-btn');    if (!authMessage) return;    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';    const username = localStorage.getItem('username') || 'Гость';    if (isLoggedIn) {        authMessage.textContent = `Вы вошли как ${username}`;        if (logoutBtn) logoutBtn.style.display = 'block';        if (loginBtn) loginBtn.style.display = 'none';    } else {        authMessage.textContent = 'Вы не авторизованы';        if (logoutBtn) logoutBtn.style.display = 'none';        if (loginBtn) loginBtn.style.display = 'block';    }}// Функция настройки кнопки выходаfunction setupLogout() {    const logoutBtn = document.getElementById('logout-btn');    if (logoutBtn) {        logoutBtn.addEventListener('click', async function() {            try {                const response = await fetch('/1337/api.php?action=logout', {                    method: 'GET',                    credentials: 'include'                });                                if (!response.ok) {                    throw new Error('Logout failed');                }            } catch (error) {                console.error('Logout error:', error);            } finally {                localStorage.removeItem('isLoggedIn');                localStorage.removeItem('username');                localStorage.removeItem('userId');                localStorage.removeItem('role');                window.location.href = '/1337/login.html';            }        });    }}// Функция отображения сообщения об ошибкеfunction showProfileError(message) {    const profileContainer = document.getElementById('profile-container');    if (!profileContainer) return;        profileContainer.innerHTML = `        <div class="profile-error">            <p>Ошибка загрузки профиля: ${message}</p>            <button class="profile-btn retry-btn" id="retry-btn">Попробовать снова</button>        </div>    `;        const retryBtn = document.getElementById('retry-btn');    if (retryBtn) {        retryBtn.addEventListener('click', loadProfileData);    }}// Функция отображения сообщенияfunction showProfileMessage(message) {    const messageDiv = document.createElement('div');    messageDiv.className = 'profile-message';    messageDiv.textContent = message;    messageDiv.style.position = 'fixed';    messageDiv.style.top = '20px';    messageDiv.style.right = '20px';    messageDiv.style.padding = '10px 20px';    messageDiv.style.backgroundColor = '#4CAF50';    messageDiv.style.color = 'white';    messageDiv.style.borderRadius = '4px';    messageDiv.style.zIndex = '1000';    messageDiv.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';        document.body.appendChild(messageDiv);        setTimeout(() => {        messageDiv.style.opacity = '0';        setTimeout(() => messageDiv.remove(), 500);    }, 3000);}// ... (предыдущий код остается без изменений)// Функции для админ-панели (если пользователь админ)async function loadUsers() {    try {        const role = localStorage.getItem('role');        if (role !== 'admin') {            const adminSection = document.getElementById('admin-section');            if (adminSection) adminSection.style.display = 'none';            return;        }                const adminSection = document.getElementById('admin-section');        if (adminSection) adminSection.style.display = 'block';                const response = await fetch('/1337/users_api.php?action=get_users', {            method: 'GET',            credentials: 'include'        });                if (!response.ok) {            throw new Error(`HTTP error! status: ${response.status}`);        }                const data = await response.json();                if (!data.success) {            throw new Error(data.message || 'Не удалось загрузить пользователей');        }                renderUsers(data.data.users);                // Инициализация обработчиков для админских кнопок        initAdminHandlers();            } catch (error) {        console.error('Ошибка загрузки пользователей:', error);        showProfileError('Не удалось загрузить список пользователей: ' + error.message);    }}function renderUsers(users) {    const container = document.getElementById('users-container');    if (!container) return;        if (!users || users.length === 0) {        container.innerHTML = '<p class="no-users">Нет пользователей</p>';        return;    }        let html = `        <table class="users-table">            <thead>                <tr>                    <th>ID</th>                    <th>Логин</th>                    <th>Имя</th>                    <th>Email</th>                    <th>Роль</th>                    <th>Дата регистрации</th>                    <th>Действия</th>                </tr>            </thead>            <tbody>    `;        users.forEach(user => {        html += `            <tr>                <td>${user.id}</td>                <td>${user.username}</td>                <td>${user.first_name || '-'}</td>                <td>${user.email}</td>                <td>${user.role === 'admin' ? 'Администратор' : 'Пользователь'}</td>                <td>${formatDate(user.created_at)}</td>                <td>                    <button class="profile-btn edit edit-user-btn" data-user-id="${user.id}">                        <i class="fas fa-edit"></i> Редактировать                    </button>                    <button class="profile-btn delete-user-btn" data-user-id="${user.id}">                        <i class="fas fa-trash"></i> Удалить                    </button>                </td>            </tr>        `;    });        html += `</tbody></table>`;    container.innerHTML = html;}// Инициализация обработчиков для админских функцийfunction initAdminHandlers() {    // Кнопка создания пользователя    const createUserBtn = document.getElementById('create-user-btn');    if (createUserBtn) {        createUserBtn.addEventListener('click', () => {            showUserModal('create');        });    }        // Кнопки редактирования пользователей    document.querySelectorAll('.edit-user-btn').forEach(btn => {        btn.addEventListener('click', async () => {            const userId = btn.getAttribute('data-user-id');            await editUser(userId);        });    });        // Кнопки удаления пользователей    document.querySelectorAll('.delete-user-btn').forEach(btn => {        btn.addEventListener('click', async () => {            const userId = btn.getAttribute('data-user-id');            await deleteUser(userId);        });    });        // Модальное окно    const modal = document.getElementById('user-modal');    const closeModalBtn = document.querySelector('#user-modal .close-modal');    const cancelBtn = document.getElementById('cancel-user-btn');        if (closeModalBtn) {        closeModalBtn.addEventListener('click', () => {            modal.style.display = 'none';        });    }        if (cancelBtn) {        cancelBtn.addEventListener('click', () => {            modal.style.display = 'none';        });    }        // Обработчик формы    const userForm = document.getElementById('user-form');    if (userForm) {        userForm.addEventListener('submit', async (e) => {            e.preventDefault();            await saveUser();        });    }        // Закрытие модального окна при клике вне его    window.addEventListener('click', (e) => {        if (e.target === modal) {            modal.style.display = 'none';        }    });}// Показать модальное окно для создания/редактирования пользователяfunction showUserModal(mode, userData = null) {    const modal = document.getElementById('user-modal');    const modalTitle = document.getElementById('modal-title');    const userIdInput = document.getElementById('modal-user-id');        if (!modal || !modalTitle || !userIdInput) return;        if (mode === 'create') {        modalTitle.textContent = 'Создание пользователя';        userIdInput.value = '';                // Очищаем форму        const form = document.getElementById('user-form');        if (form) form.reset();                // Устанавливаем роль по умолчанию        const roleSelect = document.getElementById('modal-role');        if (roleSelect) roleSelect.value = 'user';    }        modal.style.display = 'block';}// Редактирование пользователяasync function editUser(userId) {    try {        const response = await fetch(`/1337/users_api.php?action=get_user&id=${userId}`, {            method: 'GET',            credentials: 'include'        });                if (!response.ok) {            throw new Error(`HTTP error! status: ${response.status}`);        }                const data = await response.json();                if (!data.success || !data.data.user) {            throw new Error(data.message || 'Не удалось загрузить данные пользователя');        }                const user = data.data.user;                // Заполняем модальное окно данными пользователя        document.getElementById('modal-user-id').value = user.id;        document.getElementById('modal-username').value = user.username;        document.getElementById('modal-email').value = user.email;        document.getElementById('modal-first-name').value = user.first_name || '';        document.getElementById('modal-last-name').value = user.last_name || '';        document.getElementById('modal-phone').value = user.phone || '';        document.getElementById('modal-birth-date').value = user.birth_date || '';        document.getElementById('modal-role').value = user.role;                // Показываем модальное окно        document.getElementById('modal-title').textContent = 'Редактирование пользователя';        document.getElementById('user-modal').style.display = 'block';            } catch (error) {        console.error('Ошибка при редактировании пользователя:', error);        showProfileError('Не удалось загрузить данные пользователя: ' + error.message);    }}// Удаление пользователяasync function deleteUser(userId) {    if (!confirm('Вы уверены, что хотите удалить этого пользователя?')) {        return;    }        try {        const response = await fetch('/1337/users_api.php', {            method: 'POST',            headers: {                'Content-Type': 'application/x-www-form-urlencoded',            },            body: new URLSearchParams({                action: 'delete_user',                id: userId            }),            credentials: 'include'        });                const data = await response.json();                if (!response.ok || !data.success) {            throw new Error(data.message || `HTTP ${response.status}`);        }                showProfileMessage('Пользователь успешно удален');        await loadUsers(); // Обновляем список пользователей            } catch (error) {        console.error('Ошибка при удалении пользователя:', error);        showProfileError('Не удалось удалить пользователя: ' + error.message);    }}// Сохранение пользователя (создание или обновление)async function saveUser() {    const saveBtn = document.querySelector('#user-form button[type="submit"]');    if (saveBtn) saveBtn.disabled = true;        try {        const formData = {            action: document.getElementById('modal-user-id').value ? 'update_user' : 'create_user',            id: document.getElementById('modal-user-id').value || '',            username: document.getElementById('modal-username').value,            email: document.getElementById('modal-email').value,            first_name: document.getElementById('modal-first-name').value,            last_name: document.getElementById('modal-last-name').value,            phone: document.getElementById('modal-phone').value,            birth_date: document.getElementById('modal-birth-date').value,            role: document.getElementById('modal-role').value,            password: document.getElementById('modal-password').value        };                // Проверка обязательных полей        if (!formData.username || !formData.email || !formData.role) {            throw new Error('Заполните все обязательные поля');        }                // Подготовка данных для отправки        const form = new FormData();        for (const key in formData) {            if (formData[key] !== undefined && formData[key] !== null) {                form.append(key, formData[key]);            }        }                // Добавляем аватар, если он есть        const avatarInput = document.getElementById('modal-avatar');        if (avatarInput.files.length > 0) {            form.append('avatar', avatarInput.files[0]);        }                const response = await fetch('/1337/users_api.php', {            method: 'POST',            body: form,            credentials: 'include'        });                const data = await response.json();                if (!response.ok || !data.success) {            throw new Error(data.message || `HTTP ${response.status}`);        }                showProfileMessage(formData.action === 'create_user'             ? 'Пользователь успешно создан'             : 'Данные пользователя обновлены');                // Закрываем модальное окно и обновляем список        document.getElementById('user-modal').style.display = 'none';        await loadUsers();            } catch (error) {        console.error('Ошибка при сохранении пользователя:', error);        showProfileError('Ошибка: ' + error.message);    } finally {        if (saveBtn) saveBtn.disabled = false;    }}